{"version":3,"sources":["components/Create.jsx","components/Todo.jsx","components/TodosList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Create","add","useState","text","setText","isButtonDisabled","length","addTask","e","className","Input","id","placeholder","value","onChange","target","onKeyPress","charCode","size","inverted","type","disabled","onClick","Todo","index","todo","remove","update","isEditing","setEdit","isComplete","setComplete","style","backgroundColor","color","border","updateTask","task","idx","Popup","content","basic","trigger","name","class","TodosList","list","Container","map","key","App","todos","setTodos","textAlign","Header","as","dividing","updatedTodos","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSA0CeA,MAtCf,YAA0B,IAARC,EAAO,EAAPA,IAAO,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,KAEjBC,GAAoBF,EAAKG,OAE/B,SAASC,EAAQC,GACVA,GAAW,KAANA,IACRP,EAAIE,GACJC,EAAQ,KAIZ,OACE,yBAAKK,UAAU,oBACb,kBAACC,EAAA,EAAD,CACEC,GAAG,eACHC,YAAY,kBACZC,MAAOV,EACPW,SAAU,SAACN,GAAD,OAAOJ,EAAQI,EAAEO,OAAOF,QAClCG,WAAY,SAACR,GAAD,OAAOD,EAAQC,EAAES,WAC7BC,KAAK,OACLC,UAAQ,IAEV,4BACEC,KAAK,SACLT,GAAG,gBACHU,SAAUhB,EACViB,QAAS,kBAAMf,MAJjB,kB,SCiESgB,MAvFf,YAEI,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OACpB,EAC4BzB,oBAAS,GADrC,mBACM0B,EADN,KACiBC,EADjB,OAEiC3B,oBAAS,GAF1C,mBAEM4B,EAFN,KAEkBC,EAFlB,OAGuB7B,mBAASuB,GAHhC,mBAGMtB,EAHN,KAGYC,EAHZ,KAIK4B,EAAQ,CACZC,gBAAiB,gBACjBC,MAAO,UACPC,OAAQ,UAGV,SAASC,EAAWC,EAAMC,EAAK9B,GACxBA,GAAW,KAANA,IACRmB,EAAOU,EAAMC,GACbT,GAASD,IAIb,OACE,yBAAKnB,UAAU,QACXmB,EA4BA,yBAAKnB,UAAU,kBACb,2BACEA,UAAU,yBACVG,YAAY,kBACZC,MAAOV,EACPW,SAAU,SAACN,GAAD,OAAOJ,EAAQI,EAAEO,OAAOF,QAClCS,QAAS,kBAAMc,EAAWjC,EAAMqB,IAChCR,WAAY,SAACR,GAAD,OAAO4B,EAAWjC,EAAMqB,EAAOhB,MAE7C,yBAAKC,UAAU,mBACb,kBAAC8B,EAAA,EAAD,CACEC,QAAQ,cACRtB,KAAK,OACLc,MAAOA,EACPS,OAAK,EACLC,QAAS,8BAAUC,KAAK,SAASzB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMc,EAAWjC,EAAMqB,QAE1G,kBAACe,EAAA,EAAD,CACEC,QAAQ,cACRtB,KAAK,OACLc,MAAOA,EACPS,OAAK,EACLC,QAAS,8BAAUC,KAAK,eAAezB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMO,GAASD,UAjD5G,yBAAKnB,UAAU,kBACb,uBAAGA,UAAS,iCAA4BqB,EAAa,YAAc,KAAO3B,GAC1E,kBAACoC,EAAA,EAAD,CACEC,QAAQ,gBACRtB,KAAK,OACLc,MAAOA,EACPS,OAAK,EACLC,QAASZ,EACL,8BAAUa,KAAK,WAAWzB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMS,GAAaD,MAC7F,8BAAUa,KAAK,iBAAiBzB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMS,GAAaD,QAEzG,kBAACS,EAAA,EAAD,CACEC,QAAQ,YACRtB,KAAK,OACLc,MAAOA,EACPS,OAAK,EACLC,QAAS,8BAAUC,KAAK,SAASzB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMO,GAASD,QAElG,kBAACW,EAAA,EAAD,CACEC,QAAQ,cACRtB,KAAK,OACLc,MAAOA,EACPS,OAAK,EACLC,QAAS,8BAAUC,KAAK,QAAQzB,KAAK,QAAQ0B,MAAM,oBAAoBtB,QAAS,kBAAMI,EAAOD,WClB1FoB,MA1Bf,YAA8C,IAAzBC,EAAwB,EAAxBA,KAAMpB,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjC,OACE,kBAACoB,EAAA,EAAD,CAAWpC,GAAG,kBACVmC,EAAKxC,OAGLwC,EAAKE,KAAI,SAACvB,EAAMD,GAAP,OACP,kBAAC,EAAD,CACEyB,IAAKxB,EACLD,MAAOA,EACPC,KAAMA,EACNC,OAAQA,EACRC,OAAQA,OARZ,uBAAGlB,UAAU,YAAb,+B,cC+COyC,MAjDf,WAAgB,IAAD,EACahD,mBAAS,CACjC,oBACA,wBACA,+BAJW,mBACNiD,EADM,KACCC,EADD,KAqBb,OACE,kBAACL,EAAA,EAAD,CAAWM,UAAU,SAASlD,MAAI,GAChC,kBAACmD,EAAA,EAAD,CACEC,GAAG,KACHC,UAAQ,EACR7C,GAAG,UAHL,eAOA,kBAAC2C,EAAA,EAAD,CACEC,GAAG,KACH5C,GAAG,cAFL,iDAMA,kBAAC,EAAD,CACEmC,KAAMK,EACNlD,IA/BU,SAACE,GACfiD,EAAS,GAAD,mBAAKD,GAAL,CAAYhD,QAgClB,kBAAC,EAAD,CACE2C,KAAMK,EACNzB,OA/Ba,SAACvB,GAClB,IAAMsD,EAAeN,EAAMO,QAAO,SAACjC,GAAD,OAAUA,IAAStB,KACrDiD,EAASK,IA8BL9B,OA3Ba,SAACxB,EAAMqB,GACxB2B,EAAM3B,GAASrB,EACfiD,EAASD,QCZOQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e687ff5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\n\nfunction Create({ add }) {\n  const [text, setText] = useState('');\n  const isButtonDisabled = !text.length;\n\n  function addTask(e) {\n    if (!e || e === 13) {\n      add(text);\n      setText('');\n    }\n  }\n\n  return (\n    <div className=\"create-container\">\n      <Input\n        id=\"create-field\"\n        placeholder=\"Create New Item\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        onKeyPress={(e) => addTask(e.charCode)}\n        size=\"mini\"\n        inverted\n      />\n      <button\n        type=\"submit\"\n        id=\"create-button\"\n        disabled={isButtonDisabled}\n        onClick={() => addTask()}\n      >\n        Add New Item\n      </button>\n    </div>\n  );\n}\n\nCreate.propTypes = {\n  add: PropTypes.func.isRequired,\n};\n\nexport default Create;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popup } from 'semantic-ui-react';\n\nfunction Todo({\n  index, todo, remove, update,\n}) {\n  const [isEditing, setEdit] = useState(false);\n  const [isComplete, setComplete] = useState(false);\n  const [text, setText] = useState(todo);\n  const style = {\n    backgroundColor: 'rgba(0,0,0,0)',\n    color: '#49FCE4',\n    border: 'hidden',\n  };\n\n  function updateTask(task, idx, e) {\n    if (!e || e === 13) {\n      update(task, idx);\n      setEdit(!isEditing);\n    }\n  }\n\n  return (\n    <div className=\"item\">\n      {!isEditing ? (\n        <div className=\"item-container\">\n          <p className={`todo-item bright-color ${isComplete ? 'completed' : ''}`}>{text}</p>\n          <Popup\n            content=\"Complete Task\"\n            size=\"tiny\"\n            style={style}\n            basic\n            trigger={isComplete\n              ? <ion-icon name=\"checkbox\" size=\"large\" class=\"icon bright-color\" onClick={() => setComplete(!isComplete)} />\n              : <ion-icon name=\"square-outline\" size=\"large\" class=\"icon bright-color\" onClick={() => setComplete(!isComplete)} />}\n          />\n          <Popup\n            content=\"Edit Task\"\n            size=\"tiny\"\n            style={style}\n            basic\n            trigger={<ion-icon name=\"create\" size=\"large\" class=\"icon bright-color\" onClick={() => setEdit(!isEditing)} />}\n          />\n          <Popup\n            content=\"Remove Task\"\n            size=\"tiny\"\n            style={style}\n            basic\n            trigger={<ion-icon name=\"trash\" size=\"large\" class=\"icon bright-color\" onClick={() => remove(todo)} />}\n          />\n        </div>\n      ) : (\n        <div className=\"item-container\">\n          <input\n            className=\"todo-edit bright-color\"\n            placeholder=\"Create New Item\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            onClick={() => updateTask(text, index)}\n            onKeyPress={(e) => updateTask(text, index, e)}\n          />\n          <div className=\"popup-container\">\n            <Popup\n              content=\"Submit Edit\"\n              size=\"tiny\"\n              style={style}\n              basic\n              trigger={<ion-icon name=\"create\" size=\"large\" class=\"icon bright-color\" onClick={() => updateTask(text, index)} />}\n            />\n            <Popup\n              content=\"Cancel Edit\"\n              size=\"tiny\"\n              style={style}\n              basic\n              trigger={<ion-icon name=\"close-circle\" size=\"large\" class=\"icon bright-color\" onClick={() => setEdit(!isEditing)} />}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nTodo.propTypes = {\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.string.isRequired,\n  remove: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container } from 'semantic-ui-react';\nimport Todo from './Todo';\n\nfunction TodosList({ list, remove, update }) {\n  return (\n    <Container id=\"list-container\">\n      {!list.length ? (\n        <p className=\"no-items\"> There is nothing to do! </p>\n      ) : (\n        list.map((todo, index) => (\n          <Todo\n            key={todo}\n            index={index}\n            todo={todo}\n            remove={remove}\n            update={update}\n          />\n        ))\n      )}\n    </Container>\n  );\n}\n\nTodosList.propTypes = {\n  list: PropTypes.arrayOf.isRequired,\n  remove: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n};\n\nexport default TodosList;\n","import React, { useState } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport Create from './components/Create';\nimport TodosList from './components/TodosList';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    'Learn about React',\n    'Meet friend for lunch',\n    'Build really cool todo app',\n  ]);\n\n  const addTodo = (text) => {\n    setTodos([...todos, text]);\n  };\n\n  const removeTodo = (text) => {\n    const updatedTodos = todos.filter((todo) => todo !== text);\n    setTodos(updatedTodos);\n  };\n\n  const updateTodo = (text, index) => {\n    todos[index] = text;\n    setTodos(todos);\n  };\n\n  return (\n    <Container textAlign=\"center\" text>\n      <Header\n        as=\"h1\"\n        dividing\n        id=\"header\"\n      >\n        Todos Hooks\n      </Header>\n      <Header\n        as=\"h4\"\n        id=\"sub-header\"\n      >\n        A Todo app created in React using only hooks!\n      </Header>\n      <Create\n        list={todos}\n        add={addTodo}\n      />\n      <TodosList\n        list={todos}\n        remove={removeTodo}\n        update={updateTodo}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}